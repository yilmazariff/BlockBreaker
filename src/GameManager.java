/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.awt.*;
import java.awt.event.*;
import java.awt.event.KeyEvent;
import javax.swing.*;
/**
 *
 * @author CTIS
 */
public class GameManager extends javax.swing.JPanel {

    public static int score;
    public Stick s;
    public Ball b;
    Image img;
    boolean isInitial=true;
    Image[][] arr= new Image[10][10];
    //... Instance variables for the animiation
    private final int   m_interval  = 30;  // Milliseconds between updates.
    private final Timer m_timer;           // Timer fires to anmimate one step.
    /**
     * Creates new form GameManager
     */
    public GameManager() {
        initComponents();
        brickdenemesi();
        setFocusable(true);
        setPreferredSize(new Dimension(800, 560));
        setBorder(BorderFactory.createLineBorder(Color.BLACK));
        img = Toolkit.getDefaultToolkit().createImage("background.png");        
        b=new Ball();
        s=new Stick();
        s.setBound(getWidth());
        
        m_timer = new Timer(m_interval, (ActionListener) new TimerAction() {});
        
        
        addMouseMotionListener(new MouseMotionAdapter(){
        @Override
            public void mouseMoved(MouseEvent ev){
                int temp= ev.getX()-(s.getLength()/2);
                if(temp<800-s.getLength()&& temp>0){
                    if(!s.getIsLocked())
                        s.setSX(temp);
                    if(isInitial)
                        b.setPosition(temp+(s.getLength()/2-b.getRadius()/2), 508-b.getRadius());
                }
            }});
        
        addMouseListener(new MouseAdapter(){
            @Override
            public void mousePressed(MouseEvent ev){
                setAnimation(true);
            }           
        });
                
        addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {               
                int key= e.getKeyCode();
                switch(key){
                case KeyEvent.VK_RIGHT:
                    if(!s.getIsLocked())
                        s.moveRight();
                    if(isInitial)
                        b.setPosition(s.getSX()+s.getLength()/2-b.getRadius()/2, 508-b.getRadius());
                    break;
                case KeyEvent.VK_LEFT: 
                    if(!s.getIsLocked())
                        s.moveLeft();
                    if(isInitial)
                        b.setPosition(s.getSX()+s.getLength()/2-b.getRadius()/2, 508-b.getRadius());
                    break;
                case KeyEvent.VK_ESCAPE:
                    setAnimation(false);
                    break;
                case KeyEvent.VK_UP:
                    setAnimation(true);
                    break;
                }                   
            }
        });     
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scoreLabel = new javax.swing.JLabel();
        resultLabel = new javax.swing.JLabel();

        scoreLabel.setForeground(new java.awt.Color(255, 255, 0));
        scoreLabel.setText("SCORE :   "+this.score);

        resultLabel.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        resultLabel.setForeground(new java.awt.Color(255, 255, 0));
        resultLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        resultLabel.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(scoreLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(270, 270, 270)
                        .addComponent(resultLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(225, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scoreLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(177, 177, 177)
                .addComponent(resultLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(282, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    
public void brickdenemesi(){
    for(int i=0;i<10;i++)
        for(int j=0;j<10;j++)
            if(i%3!=2 && j%2==1)
            arr[i][j]= Toolkit.getDefaultToolkit().createImage("a.png");

}
public boolean isSuccess(){
    boolean flag= true;
    for(int i=0;i<10;i++)
        for(int j=0;j<10;j++)
            if(arr[i][j]!=null)
                flag=false;
    return flag;
}
    
    
 public void setAnimation(boolean turnOnOff) {
        if (turnOnOff) {
            m_timer.start();  // start animation by starting the timer.
            isInitial=false;
            s.setLocked(false);
        } else {
            m_timer.stop();   // stop timer
            s.setLocked(true);
        }
    }

    public void paintComponent(Graphics g) {
        super.paintComponent(g);  // Paint background, border
        g.drawImage(img, 0, 0, null);        
        repaint();
        for(int i=0;i<10;i++)
            for(int j=0;j<10;j++){
                g.drawImage(arr[i][j], 40+i*72, 80+j*24, null);
        }
        b.draw(g);
        s.drawS(g);
        
    }
    public String getResult(){
        if(isSuccess())
            return "MISSION COMPLETED";
        else if(!isSuccess() &&b.getY()>560)
            return "YOU LOSE";  
        else
            return"";
    }

    class TimerAction implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            if(!isSuccess()){    
                if(b.getY()>560) {       
                    setAnimation(false);
                    resultLabel.setText("YOU LOSE");
                }
                b.setBounds(getWidth(),getHeight());
                b.move(s.getSX(),s.getLength(),arr);       // Move 
                scoreLabel.setText("SCORE :   "+GameManager.score);
                repaint();      // Repaint indirectly calls paintComponent.
                
            }else{
                resultLabel.setText("YOU WIN");
                setAnimation(false);
            }  
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel resultLabel;
    private javax.swing.JLabel scoreLabel;
    // End of variables declaration//GEN-END:variables
}
